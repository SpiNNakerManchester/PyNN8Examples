[Reports]
# If reportsEnabled is false, no text reports are written.
writeSynapticReport = False
# Note: graphviz is required to draw the graph
draw_network_graph = False
# Set to > 0 to allow profiler to gather samples (assuming enabled in the compiled aplx)
n_profile_samples = 0
read_bif_field_iobuf = True
generate_bit_field_report = False
generate_bit_field_summary_report = False
write_router_compressor_with_bitfield_iobuf = True
generate_router_compression_with_bitfield_report = True
write_redundant_packet_count_report = True


[Simulation]
# Maximum spikes per second of any neuron (spike rate in Hertz)
spikes_per_second = 30

# The number of standard deviations from the mean to account for in
# the ring buffer in terms of how much safety in precision vs overflowing the
# end user is willing to risk
ring_buffer_sigma = 5

# The amount of space to reserve for incoming spikes
incoming_spike_buffer_size = 2048

# Limit the amount of DTCM used by one-to-one connections
one_to_one_connection_dtcm_max_bytes = 2048

# performance limiter to throw away packets not processed in a given time step
drop_late_spikes = True

# performance controller to ensure only so many packets from a given
# app vertex happen at any given time (aka how many machine vertices
# from this app vertex can fire at same time)
app_machine_quantity = 5

# performance controller for how long to wait in-between cores firing. Used
# as a throttle to handle slow core processing. unit = microseconds
# plastic compressor and spreader
#time_between_cores = 14
# plastic compressor
#time_between_cores = 66
# plastic bitfields on
#time_between_cores = 66
# plastic old master
#time_between_cores = 78

# 6 board cheating
#time_between_cores = 1.2
#time_between_cores = 1.2
# confirmed
#time_between_cores = 7
# static compressor and spreader
time_between_cores = 2.7
# static compressor
#time_between_cores = 2.7
# static bitfields on
#time_between_cores = 4
# static old master
#time_between_cores = 6

# performance controller for how much of the time step to use for sending
fraction_of_time_spike_sending = 0.99

# performance controller for how much of the time step to use for before the
# TDMA
fraction_of_time_before_sending = 0.01

[Mapping]
# Algorithms below
# pacman algorithms are:
# Basic_dijkstra_routing, RadialPlacer, BasicPlacer, ConnectiveBasedPlacer,
# BasicTagAllocator, BasicPartitioner, PartitionAndPlacePartitioner,
# BasicRoutingInfoAllocator, BasicDijkstraRouting,
# MallocBasedRoutingInfoAllocator, GraphEdgeFilter, EdgeToNKeysMapper
#application_to_machine_graph_algorithms = PartitionAndPlacePartitioner
#machine_graph_to_machine_algorithms = EdgeToNKeysMapper,OneToOnePlacer,NerRoute,BasicTagAllocator,ProcessPartitionConstraints,MallocBasedRoutingInfoAllocator,BasicRoutingTableGenerator,RouterCollisionPotentialReport
#machine_graph_to_virtual_machine_algorithms = EdgeToNKeysMapper,OneToOnePlacer,NerRoute,BasicTagAllocator,ProcessPartitionConstraints,MallocBasedRoutingInfoAllocator,BasicRoutingTableGenerator,MundyRouterCompressor
machine_graph_to_machine_algorithms = EdgeToNKeysMapper,SpreaderPlacer,NerRoute,BasicTagAllocator,ProcessPartitionConstraints,MallocBasedRoutingInfoAllocator,BasicRoutingTableGenerator,RouterCollisionPotentialReport
machine_graph_to_virtual_machine_algorithms = EdgeToNKeysMapper,SpreaderPlacer,NerRoute,BasicTagAllocator,ProcessPartitionConstraints,MallocBasedRoutingInfoAllocator,BasicRoutingTableGenerator,MundyRouterCompressor

#loading_algorithms = SpynnakerMachineBitFieldUnorderedRouterCompressor,BitFieldCompressorReport
#loading_algorithms = SpynnakerMachineBitFieldPairRouterCompressor,BitFieldCompressorReport
#loading_algorithms = HostBasedBitFieldRouterCompressor

[Buffers]
# Host and port on which to receive buffer requests
receive_buffer_port = None
receive_buffer_host = 0.0.0.0

# Buffered recording can be enabled below.  Note that spike source array
# recording is always buffered.
enable_buffered_recording = False

# These values can be adjusted to set the maximum amount of SDRAM per core
# that will be used for the various neuron parameters to be recorded.  This
# will affect how many neurons can fit on a chip.
spike_buffer_size = 1048576
variable_buffer_size = 1048576

# Advanced parameters to further control buffering
buffer_size_before_receive = 16384
time_between_requests = 250

minimum_buffer_sdram = 1048576

[Database]
create_routing_info_to_neuron_id_mapping = True
listen_port = None
notify_port = 19999
notify_hostname = localhost

[Recording]
# Uncomment the following to change from the defaults
live_spike_port = 17895
live_spike_host = 0.0.0.0

[Machine]
reset_machine_on_startup = True